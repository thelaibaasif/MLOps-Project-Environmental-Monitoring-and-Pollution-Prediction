# MLOps Project: Environmental Monitoring and Pollution Prediction

## Project Overview
This project aims to monitor environmental data, such as air quality, weather, and pollution levels, while predicting pollution trends using a robust MLOps pipeline. The pipeline integrates various stages including data collection, model training, deployment, and monitoring, leveraging tools like DVC, MLflow, Grafana, and Prometheus.

### Key Features
1. **Real-Time Data Collection**:
   - Automated data fetching from the OpenWeatherMap API for weather and air quality information.
   - Version control for data using DVC.

2. **Pollution Prediction**:
   - Time-series modeling with LSTM neural networks for accurate forecasting.
   - Experiment tracking and management through MLflow.

3. **Deployment and Monitoring**:
   - Flask-based API for serving predictions in real-time.
   - Comprehensive monitoring of metrics using Prometheus and Grafana dashboards.

---

## Folder Structure
- **data/**: Stores versioned data managed by DVC.
- **monitoring/**: Contains configuration files for Grafana and Prometheus.
- **api/**: Includes the Flask API for serving model predictions.
- **best_model.h5**: The trained model file for pollution prediction.
- **fetch_data.py**: Script for fetching real-time data from the OpenWeatherMap API.
- **dockerfile**: Docker configuration file for containerized deployment.
- **requirements.txt**: Lists Python dependencies required for the project.

---

## How to Run the Project

### Prerequisites
- Python 3.8 or higher
- Docker and Docker Compose
- Prometheus and Grafana (optional for monitoring)
- OpenWeatherMap API key

### Steps
1. **Clone the Repository**:
   ```bash
   git clone https://github.com/<your-username>/MLOps_Environmental_Monitoring.git
   cd MLOps_Environmental_Monitoring
   ```

2. **Set Up the Environment**:
   ```bash
   python -m venv venv
   source venv/bin/activate   # On Windows: venv\Scripts\activate
   pip install -r requirements.txt
   ```

3. **Fetch Data**:
   Run the script to fetch data:
   ```bash
   python fetch_data.py
   ```

4. **Track Data with DVC**:
   Use DVC to track and push data:
   ```bash
   dvc add data/
   dvc push
   ```

5. **Run the Flask API**:
   Start the API to serve predictions:
   ```bash
   python api/app.py
   ```

6. **Monitor Metrics**:
   - Start Prometheus:
     ```bash
     docker-compose up prometheus
     ```
   - Start Grafana:
     ```bash
     docker-compose up grafana
     ```

---

## Authors
- **Laiba Asif**: Lead Developer

---

## References
- [SEED Labs](https://seedsecuritylabs.org/)
- [Prometheus](https://prometheus.io/)
- [Grafana](https://grafana.com/)
- [OpenWeatherMap API](https://openweathermap.org/api)

